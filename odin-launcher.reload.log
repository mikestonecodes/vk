

Build succeeded, launching vk...
DEBUG: Initializing GLFW platform
DEBUG: GLFW platform setup complete
[INFO] No valid vk_loader_settings.json file found, no loader settings will be active
[INFO] Searching for implicit layer manifest files
[INFO]    In following locations:
[INFO]       /home/mike/.config/vulkan/implicit_layer.d
[INFO]       /etc/xdg/vulkan/implicit_layer.d
[INFO]       /etc/vulkan/implicit_layer.d
[INFO]       /home/mike/.local/share/vulkan/implicit_layer.d
[INFO]       /usr/local/share/vulkan/implicit_layer.d
[INFO]       /usr/share/vulkan/implicit_layer.d
[INFO]    Found the following files:
[INFO]       /home/mike/.local/share/vulkan/implicit_layer.d/steamoverlay_i386.json
[INFO]       /home/mike/.local/share/vulkan/implicit_layer.d/steamoverlay_x86_64.json
[INFO]       /home/mike/.local/share/vulkan/implicit_layer.d/steamfossilize_i386.json
[INFO]       /home/mike/.local/share/vulkan/implicit_layer.d/steamfossilize_x86_64.json
[INFO]       /usr/share/vulkan/implicit_layer.d/nvidia_layers.json
[INFO]       /usr/share/vulkan/implicit_layer.d/VkLayer_MESA_device_select.json
[INFO] Found manifest file /home/mike/.local/share/vulkan/implicit_layer.d/steamoverlay_i386.json (file version 1.0.0)
[INFO] Found manifest file /home/mike/.local/share/vulkan/implicit_layer.d/steamoverlay_x86_64.json (file version 1.0.0)
[INFO] Found manifest file /home/mike/.local/share/vulkan/implicit_layer.d/steamfossilize_i386.json (file version 1.0.0)
[INFO] Found manifest file /home/mike/.local/share/vulkan/implicit_layer.d/steamfossilize_x86_64.json (file version 1.0.0)
[INFO] Found manifest file /usr/share/vulkan/implicit_layer.d/nvidia_layers.json (file version 1.0.1)
[INFO] Found manifest file /usr/share/vulkan/implicit_layer.d/VkLayer_MESA_device_select.json (file version 1.0.0)
[INFO] Searching for explicit layer manifest files
[INFO]    In following locations:
[INFO]       /home/mike/.config/vulkan/explicit_layer.d
[INFO]       /etc/xdg/vulkan/explicit_layer.d
[INFO]       /etc/vulkan/explicit_layer.d
[INFO]       /home/mike/.local/share/vulkan/explicit_layer.d
[INFO]       /usr/local/share/vulkan/explicit_layer.d
[INFO]       /usr/share/vulkan/explicit_layer.d
[INFO]    Found the following files:
[INFO]       /usr/share/vulkan/explicit_layer.d/VkLayer_khronos_validation.json
[INFO]       /usr/share/vulkan/explicit_layer.d/VkLayer_INTEL_nullhw.json
[INFO]       /usr/share/vulkan/explicit_layer.d/VkLayer_MESA_overlay.json
[INFO]       /usr/share/vulkan/explicit_layer.d/VkLayer_MESA_screenshot.json
[INFO]       /usr/share/vulkan/explicit_layer.d/VkLayer_MESA_vram_report_limit.json
[INFO] Found manifest file /usr/share/vulkan/explicit_layer.d/VkLayer_khronos_validation.json (file version 1.2.0)
[INFO] Found manifest file /usr/share/vulkan/explicit_layer.d/VkLayer_INTEL_nullhw.json (file version 1.0.0)
[INFO] Found manifest file /usr/share/vulkan/explicit_layer.d/VkLayer_MESA_overlay.json (file version 1.0.0)
[INFO] Found manifest file /usr/share/vulkan/explicit_layer.d/VkLayer_MESA_screenshot.json (file version 1.0.0)
[INFO] Found manifest file /usr/share/vulkan/explicit_layer.d/VkLayer_MESA_vram_report_limit.json (file version 1.0.0)
[INFO] Searching for driver manifest files
[INFO]    In following locations:
[INFO]       /home/mike/.config/vulkan/icd.d
[INFO]       /etc/xdg/vulkan/icd.d
[INFO]       /etc/vulkan/icd.d
[INFO]       /home/mike/.local/share/vulkan/icd.d
[INFO]       /usr/local/share/vulkan/icd.d
[INFO]       /usr/share/vulkan/icd.d
[INFO]    Found the following files:
[INFO]       /usr/share/vulkan/icd.d/nvidia_icd.json
[INFO]       /usr/share/vulkan/icd.d/intel_hasvk_icd.x86_64.json
[INFO]       /usr/share/vulkan/icd.d/intel_icd.x86_64.json
[INFO]       /usr/share/vulkan/icd.d/intel_hasvk_icd.i686.json
[INFO]       /usr/share/vulkan/icd.d/intel_icd.i686.json
[INFO] Found ICD manifest file /usr/share/vulkan/icd.d/nvidia_icd.json, version 1.0.1
[VERBOSE] Searching for ICD drivers named libGLX_nvidia.so.0
[INFO] Found ICD manifest file /usr/share/vulkan/icd.d/intel_hasvk_icd.x86_64.json, version 1.0.1
[VERBOSE] Searching for ICD drivers named /usr/lib/libvulkan_intel_hasvk.so
[INFO] Found ICD manifest file /usr/share/vulkan/icd.d/intel_icd.x86_64.json, version 1.0.1
[VERBOSE] Searching for ICD drivers named /usr/lib/libvulkan_intel.so
[INFO] Found ICD manifest file /usr/share/vulkan/icd.d/intel_hasvk_icd.i686.json, version 1.0.1
[VERBOSE] Searching for ICD drivers named /usr/lib32/libvulkan_intel_hasvk.so
[INFO] loader_parse_icd_manifest: Driver library architecture doesn't match the current running architecture, skipping this driver
[INFO] Found ICD manifest file /usr/share/vulkan/icd.d/intel_icd.i686.json, version 1.0.1
[VERBOSE] Searching for ICD drivers named /usr/lib32/libvulkan_intel.so
[INFO] loader_parse_icd_manifest: Driver library architecture doesn't match the current running architecture, skipping this driver
[VERBOSE] Loading layer library libVkLayer_khronos_validation.so
[INFO] Insert instance layer "VK_LAYER_KHRONOS_validation" (/usr/lib/libVkLayer_khronos_validation.so)
[VERBOSE] Loading layer library libVkLayer_MESA_device_select.so
[INFO] Insert instance layer "VK_LAYER_MESA_device_select" (/usr/lib/libVkLayer_MESA_device_select.so)
[INFO] vkCreateInstance layer callstack setup to:
[INFO]    <Application>
[INFO]      ||
[INFO]    <Loader>
[INFO]      ||
[INFO]    VK_LAYER_MESA_device_select
[INFO]            Type: Implicit
[INFO]            Enabled By: Implicit Layer
[INFO]                Disable Env Var:  NODEVICE_SELECT
[INFO]            Manifest: /usr/share/vulkan/implicit_layer.d/VkLayer_MESA_device_select.json
[INFO]            Library:  /usr/lib/libVkLayer_MESA_device_select.so
[INFO]      ||
[INFO]    VK_LAYER_KHRONOS_validation
[INFO]            Type: Explicit
[INFO]            Enabled By: By the Application
[INFO]            Manifest: /usr/share/vulkan/explicit_layer.d/VkLayer_khronos_validation.json
[INFO]            Library:  /usr/lib/libVkLayer_khronos_validation.so
[INFO]      ||
[INFO]    <Drivers>
[WARNING] vkCreateInstance(): Attempting to enable extension VK_EXT_debug_utils, but this extension is intended to support use by applications when debugging and it is strongly recommended that it be otherwise avoided.
[INFO] vkCreateInstance(): Khronos Validation Layer Active:
    Current Enables: VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT, VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT.
    Current Disables: None.

[INFO] linux_read_sorted_physical_devices:
[INFO]      Original order:
[INFO]            [0] NVIDIA GeForce RTX 4070 Laptop GPU
[INFO]      Sorted order:
[INFO]            [0] NVIDIA GeForce RTX 4070 Laptop GPU
[INFO] linux_read_sorted_physical_devices:
[INFO]      Original order:
[INFO]            [0] NVIDIA GeForce RTX 4070 Laptop GPU
[INFO]      Sorted order:
[INFO]            [0] NVIDIA GeForce RTX 4070 Laptop GPU
[VERBOSE] Copying old device 0 into new device 0
Validation Error: [ VUID-vkCreateDevice-ppEnabledExtensionNames-01387 ] | MessageID = 0x12537a2c
vkCreateDevice(): pCreateInfo->ppEnabledExtensionNames[1] Missing extension required by the device extension VK_EXT_swapchain_maintenance1: VK_EXT_surface_maintenance1.
The Vulkan spec states: All required device extensions for each extension in the VkDeviceCreateInfo::ppEnabledExtensionNames list must also be present in that list. (https://docs.vulkan.org/spec/latest/chapters/devsandqueues.html#VUID-vkCreateDevice-ppEnabledExtensionNames-01387)
Objects: 1
    [0] VkInstance 0x2f80e570

Validation Warning: [ BestPractices-deprecated-extension ] | MessageID = 0xda8260ba
vkCreateDevice(): Attempting to enable deprecated extension VK_EXT_swapchain_maintenance1, but this extension has been promoted to VK_KHR_swapchain_maintenance1.
Objects: 1
    [0] VkInstance 0x2f80e570

[WARNING] vkCreateSwapchainKHR(): called before getting surface present mode(s) from vkGetPhysicalDeviceSurfacePresentModesKHR.
[WARNING] vkBindBufferMemory(): Trying to bind VkBuffer 0x190000000019 to a memory block which is fully consumed by the buffer. The required size of the allocation is 32, but smaller buffers like this should be sub-allocated from larger memory blocks. (Current threshold is 1048576 bytes)
â†» Shader changed, reloading...
Window resized to 1856x1016
[WARNING] vkCreateSwapchainKHR(): called before getting surface present mode(s) from vkGetPhysicalDeviceSurfacePresentModesKHR.
[ERROR] vkBeginCommandBuffer(): on active VkCommandBuffer 0x307000a0 before it has completed. You must check command buffer fence before this call.
The Vulkan spec states: commandBuffer must not be in the recording or pending state (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkBeginCommandBuffer-commandBuffer-00049)
[ERROR] vkQueueSubmit(): pSubmits[0].pCommandBuffers[0] VkCommandBuffer 0x307000a0 is already in use and is not marked for simultaneous use.
The Vulkan spec states: If any element of the pCommandBuffers member of any element of pSubmits was not recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT, it must not be in the pending state (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkQueueSubmit-pCommandBuffers-00071)
[ERROR] vkQueueSubmit(): pSubmits[0].pSignalSemaphores[0] (VkSemaphore 0xc000000000c) is being signaled by VkQueue 0x303727e0, but it may still be in use by VkSwapchainKHR 0x3d000000003d.
Most recently acquired image indices: 1, 2, 0, 1, [2], 0, 1, 0.
(Brackets mark the last use of VkSemaphore 0xc000000000c in a presentation operation.)
Swapchain image 2 was presented but was neither re-acquired nor waited on using a VK_KHR_swapchain_maintenance1 fence, so VkSemaphore 0xc000000000c may still be in use and cannot be safely reused with image index 0.
Vulkan insight: See https://docs.vulkan.org/guide/latest/swapchain_semaphore_reuse.html for details on swapchain semaphore reuse. Examples of possible approaches:
   a) Use a separate semaphore per swapchain image. Index these semaphores using the index of the acquired image.
   b) Consider the VK_KHR_swapchain_maintenance1 extension. It allows using a VkFence with the presentation operation.
The Vulkan spec states: Each binary semaphore element of the pSignalSemaphores member of any element of pSubmits must be unsignaled when the semaphore signal operation it defines is executed on the device (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkQueueSubmit-pSignalSemaphores-00067)
[ERROR] vkBeginCommandBuffer(): on active VkCommandBuffer 0x30704310 before it has completed. You must check command buffer fence before this call.
The Vulkan spec states: commandBuffer must not be in the recording or pending state (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkBeginCommandBuffer-commandBuffer-00049)
[ERROR] vkQueueSubmit(): pSubmits[0].pCommandBuffers[0] VkCommandBuffer 0x30704310 is already in use and is not marked for simultaneous use.
The Vulkan spec states: If any element of the pCommandBuffers member of any element of pSubmits was not recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT, it must not be in the pending state (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkQueueSubmit-pCommandBuffers-00071)
[ERROR] vkQueueSubmit(): pSubmits[0].pSignalSemaphores[0] (VkSemaphore 0xf000000000f) is being signaled by VkQueue 0x303727e0, but it may still be in use by VkSwapchainKHR 0x3d000000003d.
Most recently acquired image indices: 0, 2, 1, 0, [2], 1, 0, 1.
(Brackets mark the last use of VkSemaphore 0xf000000000f in a presentation operation.)
Swapchain image 2 was presented but was neither re-acquired nor waited on using a VK_KHR_swapchain_maintenance1 fence, so VkSemaphore 0xf000000000f may still be in use and cannot be safely reused with image index 1.
Vulkan insight: See https://docs.vulkan.org/guide/latest/swapchain_semaphore_reuse.html for details on swapchain semaphore reuse. Examples of possible approaches:
   a) Use a separate semaphore per swapchain image. Index these semaphores using the index of the acquired image.
   b) Consider the VK_KHR_swapchain_maintenance1 extension. It allows using a VkFence with the presentation operation.
The Vulkan spec states: Each binary semaphore element of the pSignalSemaphores member of any element of pSubmits must be unsignaled when the semaphore signal operation it defines is executed on the device (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkQueueSubmit-pSignalSemaphores-00067)
[ERROR] vkBeginCommandBuffer(): on active VkCommandBuffer 0x307000a0 before it has completed. You must check command buffer fence before this call.
The Vulkan spec states: commandBuffer must not be in the recording or pending state (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkBeginCommandBuffer-commandBuffer-00049)
[ERROR] vkQueueSubmit(): pSubmits[0].pCommandBuffers[0] VkCommandBuffer 0x307000a0 is already in use and is not marked for simultaneous use.
The Vulkan spec states: If any element of the pCommandBuffers member of any element of pSubmits was not recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT, it must not be in the pending state (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkQueueSubmit-pCommandBuffers-00071)
[ERROR] vkQueueSubmit(): pSubmits[0].pSignalSemaphores[0] (VkSemaphore 0x120000000012) is being signaled by VkQueue 0x303727e0, but it may still be in use by VkSwapchainKHR 0x3d000000003d.
Most recently acquired image indices: 1, 2, 0, 1, [2], 0, 1, 0.
(Brackets mark the last use of VkSemaphore 0x120000000012 in a presentation operation.)
Swapchain image 2 was presented but was neither re-acquired nor waited on using a VK_KHR_swapchain_maintenance1 fence, so VkSemaphore 0x120000000012 may still be in use and cannot be safely reused with image index 0.
Vulkan insight: See https://docs.vulkan.org/guide/latest/swapchain_semaphore_reuse.html for details on swapchain semaphore reuse. Examples of possible approaches:
   a) Use a separate semaphore per swapchain image. Index these semaphores using the index of the acquired image.
   b) Consider the VK_KHR_swapchain_maintenance1 extension. It allows using a VkFence with the presentation operation.
The Vulkan spec states: Each binary semaphore element of the pSignalSemaphores member of any element of pSubmits must be unsignaled when the semaphore signal operation it defines is executed on the device (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkQueueSubmit-pSignalSemaphores-00067)
[ERROR] vkBeginCommandBuffer(): on active VkCommandBuffer 0x30704310 before it has completed. You must check command buffer fence before this call.
The Vulkan spec states: commandBuffer must not be in the recording or pending state (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkBeginCommandBuffer-commandBuffer-00049)
[ERROR] vkQueueSubmit(): pSubmits[0].pCommandBuffers[0] VkCommandBuffer 0x30704310 is already in use and is not marked for simultaneous use.
The Vulkan spec states: If any element of the pCommandBuffers member of any element of pSubmits was not recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT, it must not be in the pending state (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkQueueSubmit-pCommandBuffers-00071)
[ERROR] vkQueueSubmit(): pSubmits[0].pSignalSemaphores[0] (VkSemaphore 0xc000000000c) is being signaled by VkQueue 0x303727e0, but it may still be in use by VkSwapchainKHR 0x3d000000003d.
Most recently acquired image indices: 0, 2, 1, 0, [2], 1, 0, 1.
(Brackets mark the last use of VkSemaphore 0xc000000000c in a presentation operation.)
Swapchain image 2 was presented but was neither re-acquired nor waited on using a VK_KHR_swapchain_maintenance1 fence, so VkSemaphore 0xc000000000c may still be in use and cannot be safely reused with image index 1.
Vulkan insight: See https://docs.vulkan.org/guide/latest/swapchain_semaphore_reuse.html for details on swapchain semaphore reuse. Examples of possible approaches:
   a) Use a separate semaphore per swapchain image. Index these semaphores using the index of the acquired image.
   b) Consider the VK_KHR_swapchain_maintenance1 extension. It allows using a VkFence with the presentation operation.
The Vulkan spec states: Each binary semaphore element of the pSignalSemaphores member of any element of pSubmits must be unsignaled when the semaphore signal operation it defines is executed on the device (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkQueueSubmit-pSignalSemaphores-00067)
[ERROR] vkDestroyDevice(): Object Tracking - For VkDevice 0x3022d1b0, VkBuffer 0x2b000000002b has not been destroyed.
The Vulkan spec states: All child objects created on device that can be destroyed or freed must have been destroyed or freed prior to destroying device (https://docs.vulkan.org/spec/latest/chapters/devsandqueues.html#VUID-vkDestroyDevice-device-05137)
[ERROR] vkDestroyDevice(): Object Tracking - For VkDevice 0x3022d1b0, VkBuffer 0x290000000029 has not been destroyed.
The Vulkan spec states: All child objects created on device that can be destroyed or freed must have been destroyed or freed prior to destroying device (https://docs.vulkan.org/spec/latest/chapters/devsandqueues.html#VUID-vkDestroyDevice-device-05137)
[ERROR] vkDestroyDevice(): Object Tracking - For VkDevice 0x3022d1b0, VkBuffer 0x2f000000002f has not been destroyed.
The Vulkan spec states: All child objects created on device that can be destroyed or freed must have been destroyed or freed prior to destroying device (https://docs.vulkan.org/spec/latest/chapters/devsandqueues.html#VUID-vkDestroyDevice-device-05137)
[ERROR] vkDestroyDevice(): Object Tracking - For VkDevice 0x3022d1b0, VkBuffer 0x3b000000003b has not been destroyed.
The Vulkan spec states: All child objects created on device that can be destroyed or freed must have been destroyed or freed prior to destroying device (https://docs.vulkan.org/spec/latest/chapters/devsandqueues.html#VUID-vkDestroyDevice-device-05137)
[ERROR] vkDestroyDevice(): Object Tracking - For VkDevice 0x3022d1b0, VkBuffer 0x2d000000002d has not been destroyed.
The Vulkan spec states: All child objects created on device that can be destroyed or freed must have been destroyed or freed prior to destroying device (https://docs.vulkan.org/spec/latest/chapters/devsandqueues.html#VUID-vkDestroyDevice-device-05137)
[ERROR] vkDestroyDevice(): Object Tracking - For VkDevice 0x3022d1b0, VkBuffer 0x1f000000001f has not been destroyed.
The Vulkan spec states: All child objects created on device that can be destroyed or freed must have been destroyed or freed prior to destroying device (https://docs.vulkan.org/spec/latest/chapters/devsandqueues.html#VUID-vkDestroyDevice-device-05137)
[ERROR] vkDestroyDevice(): Object Tracking - For VkDevice 0x3022d1b0, VkBuffer 0x210000000021 has not been destroyed.
The Vulkan spec states: All child objects created on device that can be destroyed or freed must have been destroyed or freed prior to destroying device (https://docs.vulkan.org/spec/latest/chapters/devsandqueues.html#VUID-vkDestroyDevice-device-05137)
[ERROR] vkDestroyDevice(): Object Tracking - For VkDevice 0x3022d1b0, VkBuffer 0x1d000000001d has not been destroyed.
The Vulkan spec states: All child objects created on device that can be destroyed or freed must have been destroyed or freed prior to destroying device (https://docs.vulkan.org/spec/latest/chapters/devsandqueues.html#VUID-vkDestroyDevice-device-05137)
[ERROR] vkDestroyDevice(): Object Tracking - For VkDevice 0x3022d1b0, VkBuffer 0x230000000023 has not been destroyed.
The Vulkan spec states: All child objects created on device that can be destroyed or freed must have been destroyed or freed prior to destroying device (https://docs.vulkan.org/spec/latest/chapters/devsandqueues.html#VUID-vkDestroyDevice-device-05137)
[ERROR] (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkDestroyDevice(): Object Tracking - For VkDevice 0x3022d1b0, VkBuffer 0x250000000025 has not been destroyed.
The Vulkan spec states: All child objects created on device that can be destroyed or freed must have been destroyed or freed prior to destroying device (https://docs.vulkan.org/spec/latest/chapters/devsandqueues.html#VUID-vkDestroyDevice-device-05137)
[VERBOSE] Unloading layer library /usr/lib/libVkLayer_MESA_device_select.so
[VERBOSE] Unloading layer library /usr/lib/libVkLayer_khronos_validation.so
Cleaning up GLFW...
