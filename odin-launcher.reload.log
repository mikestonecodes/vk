

Build succeeded, launching vk...
DEBUG: Initializing GLFW platform
DEBUG: GLFW platform setup complete
DEBUG: Getting window size
DEBUG: Initializing Vulkan
DEBUG: Loading Vulkan library
DEBUG: Loading global Vulkan procedures
DEBUG: Creating application info
DEBUG: Application info created
DEBUG: About to create Vulkan instance
DEBUG: Validation layers enabled: true
DEBUG: Extension count: 3
DEBUG: Layer count: 1
DEBUG: CreateInstance returned: SUCCESS
DEBUG: Instance created successfully
DEBUG: Loading instance procedures
DEBUG: Creating Vulkan surface
Validation layer: linux_read_sorted_physical_devices:
Validation layer:      Original order:
Validation layer:            [0] NVIDIA GeForce RTX 4070 Laptop GPU
Validation layer:      Sorted order:
Validation layer:            [0] NVIDIA GeForce RTX 4070 Laptop GPU  
Validation layer: Copying old device 0 into new device 0
Validation layer: linux_read_sorted_physical_devices:
Validation layer:      Original order:
Validation layer:            [0] NVIDIA GeForce RTX 4070 Laptop GPU
Validation layer:      Sorted order:
Validation layer:            [0] NVIDIA GeForce RTX 4070 Laptop GPU  
Validation layer: Copying old device 0 into new device 0
Validation layer: linux_read_sorted_physical_devices:
Validation layer:      Original order:
Validation layer:            [0] NVIDIA GeForce RTX 4070 Laptop GPU
Validation layer:      Sorted order:
Validation layer:            [0] NVIDIA GeForce RTX 4070 Laptop GPU  
Validation layer: Copying old device 0 into new device 0
Validation layer: linux_read_sorted_physical_devices:
Validation layer:      Original order:
Validation layer:            [0] NVIDIA GeForce RTX 4070 Laptop GPU
Validation layer:      Sorted order:
Validation layer:            [0] NVIDIA GeForce RTX 4070 Laptop GPU  
Validation layer: Copying old device 0 into new device 0
Validation layer: Removing driver /usr/lib/libvulkan_intel.so due to not having any physical devices
Validation layer: Removing driver /usr/lib/libvulkan_intel_hasvk.so due to not having any physical devices
Validation layer: Inserted device layer "VK_LAYER_KHRONOS_validation" (libVkLayer_khronos_validation.so)
Validation layer: Failed to find vkGetDeviceProcAddr in layer "libVkLayer_MESA_device_select.so"
Validation layer: vkCreateDevice layer callstack setup to:
Validation layer:    <Application>
Validation layer:      ||
Validation layer:    <Loader>
Validation layer:      ||
Validation layer:    VK_LAYER_KHRONOS_validation
Validation layer:            Type: Explicit
Validation layer:            Enabled By: By the Application
Validation layer:            Manifest: /usr/share/vulkan/explicit_layer.d/VkLayer_khronos_validation.json
Validation layer:            Library:  libVkLayer_khronos_validation.so
Validation layer:      ||
Validation layer:    <Device>
Validation layer:        Using "NVIDIA GeForce RTX 4070 Laptop GPU" with driver: "libGLX_nvidia.so.0"
DEBUG: Loading device procedures
DEBUG: Creating swapchain
DEBUG: Initializing resources
DEBUG: Vulkan init complete
Discovered 3 shaders: graphics.hlsl compute.hlsl post_process.hlsl 
Window resized to 1866x1026
Validation layer: vkAcquireNextImageKHR(): Semaphore must not have any pending operations.
The Vulkan spec states: If semaphore is not VK_NULL_HANDLE, it must not have any uncompleted signal or wait operations pending (https://docs.vulkan.org/spec/latest/chapters/VK_KHR_surface/wsi.html#VUID-vkAcquireNextImageKHR-semaphore-01779)
Validation layer: vkQueueSubmit(): pSubmits[0].pSignalSemaphores[0] (VkSemaphore 0xa000000000a) is being signaled by VkQueue 0x8f21c00, but it may still be in use by VkSwapchainKHR 0x240000000024.
Here are the most recently acquired image indices: 0, 1, [2], 0, 1, 0.
(brackets mark the last use of VkSemaphore 0xa000000000a in a presentation operation)
Swapchain image 2 was presented but was not re-acquired, so VkSemaphore 0xa000000000a may still be in use and cannot be safely reused with image index 0.
Vulkan insight: One solution is to assign each image its own semaphore. Here are some common methods to ensure that a semaphore passed to vkQueuePresentKHR is not in use and can be safely reused:
	a) Use a separate semaphore per swapchain image. Index these semaphores using the index of the acquired image.
	b) Consider the VK_KHR_swapchain_maintenance1 extension. It allows using a VkFence with the presentation operation.
The Vulkan spec states: Each binary semaphore element of the pSignalSemaphores member of any element of pSubmits must be unsignaled when the semaphore signal operation it defines is executed on the device (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkQueueSubmit-pSignalSemaphores-00067)
Validation layer: vkQueueSubmit(): pSubmits[0].pSignalSemaphores[0] (VkSemaphore 0x80000000008) is being signaled by VkQueue 0x8f21c00, but it may still be in use by VkSwapchainKHR 0x240000000024.
Here are the most recently acquired image indices: 1, 2, 0, 1, [2], 0, 1, 0.
(brackets mark the last use of VkSemaphore 0x80000000008 in a presentation operation)
Swapchain image 2 was presented but was not re-acquired, so VkSemaphore 0x80000000008 may still be in use and cannot be safely reused with image index 0.
Vulkan insight: One solution is to assign each image its own semaphore. Here are some common methods to ensure that a semaphore passed to vkQueuePresentKHR is not in use and can be safely reused:
	a) Use a separate semaphore per swapchain image. Index these semaphores using the index of the acquired image.
	b) Consider the VK_KHR_swapchain_maintenance1 extension. It allows using a VkFence with the presentation operation.
The Vulkan spec states: Each binary semaphore element of the pSignalSemaphores member of any element of pSubmits must be unsignaled when the semaphore signal operation it defines is executed on the device (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkQueueSubmit-pSignalSemaphores-00067)
Validation layer: vkQueueSubmit(): pSubmits[0].pSignalSemaphores[0] (VkSemaphore 0xa000000000a) is being signaled by VkQueue 0x8f21c00, but it may still be in use by VkSwapchainKHR 0x240000000024.
Here are the most recently acquired image indices: 0, 1, 0, 1, [2], 0, 1, 0.
(brackets mark the last use of VkSemaphore 0xa000000000a in a presentation operation)
Swapchain image 2 was presented but was not re-acquired, so VkSemaphore 0xa000000000a may still be in use and cannot be safely reused with image index 0.
Vulkan insight: One solution is to assign each image its own semaphore. Here are some common methods to ensure that a semaphore passed to vkQueuePresentKHR is not in use and can be safely reused:
	a) Use a separate semaphore per swapchain image. Index these semaphores using the index of the acquired image.
	b) Consider the VK_KHR_swapchain_maintenance1 extension. It allows using a VkFence with the presentation operation.
The Vulkan spec states: Each binary semaphore element of the pSignalSemaphores member of any element of pSubmits must be unsignaled when the semaphore signal operation it defines is executed on the device (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkQueueSubmit-pSignalSemaphores-00067)
Validation layer: vkQueueSubmit(): pSubmits[0].pSignalSemaphores[0] (VkSemaphore 0x80000000008) is being signaled by VkQueue 0x8f21c00, but it may still be in use by VkSwapchainKHR 0x240000000024.
Here are the most recently acquired image indices: 1, 2, 0, 1, [2], 0, 1, 0.
(brackets mark the last use of VkSemaphore 0x80000000008 in a presentation operation)
Swapchain image 2 was presented but was not re-acquired, so VkSemaphore 0x80000000008 may still be in use and cannot be safely reused with image index 0.
Vulkan insight: One solution is to assign each image its own semaphore. Here are some common methods to ensure that a semaphore passed to vkQueuePresentKHR is not in use and can be safely reused:
	a) Use a separate semaphore per swapchain image. Index these semaphores using the index of the acquired image.
	b) Consider the VK_KHR_swapchain_maintenance1 extension. It allows using a VkFence with the presentation operation.
The Vulkan spec states: Each binary semaphore element of the pSignalSemaphores member of any element of pSubmits must be unsignaled when the semaphore signal operation it defines is executed on the device (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkQueueSubmit-pSignalSemaphores-00067)
Validation layer: vkQueueSubmit(): pSubmits[0].pSignalSemaphores[0] (VkSemaphore 0xa000000000a) is being signaled by VkQueue 0x8f21c00, but it may still be in use by VkSwapchainKHR 0x240000000024.
Here are the most recently acquired image indices: 1, 0, 1, 0, [1], 0, 2, 0.
(brackets mark the last use of VkSemaphore 0xa000000000a in a presentation operation)
Swapchain image 1 was presented but was not re-acquired, so VkSemaphore 0xa000000000a may still be in use and cannot be safely reused with image index 0.
Vulkan insight: One solution is to assign each image its own semaphore. Here are some common methods to ensure that a semaphore passed to vkQueuePresentKHR is not in use and can be safely reused:
	a) Use a separate semaphore per swapchain image. Index these semaphores using the index of the acquired image.
	b) Consider the VK_KHR_swapchain_maintenance1 extension. It allows using a VkFence with the presentation operation.
The Vulkan spec states: Each binary semaphore element of the pSignalSemaphores member of any element of pSubmits must be unsignaled when the semaphore signal operation it defines is executed on the device (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkQueueSubmit-pSignalSemaphores-00067)
Validation layer: vkQueueSubmit(): pSubmits[0].pSignalSemaphores[0] (VkSemaphore 0x80000000008) is being signaled by VkQueue 0x8f21c00, but it may still be in use by VkSwapchainKHR 0x240000000024.
Here are the most recently acquired image indices: 1, 2, 0, 1, [2], 0, 1, 0.
(brackets mark the last use of VkSemaphore 0x80000000008 in a presentation operation)
Swapchain image 2 was presented but was not re-acquired, so VkSemaphore 0x80000000008 may still be in use and cannot be safely reused with image index 0.
Vulkan insight: One solution is to assign each image its own semaphore. Here are some common methods to ensure that a semaphore passed to vkQueuePresentKHR is not in use and can be safely reused:
	a) Use a separate semaphore per swapchain image. Index these semaphores using the index of the acquired image.
	b) Consider the VK_KHR_swapchain_maintenance1 extension. It allows using a VkFence with the presentation operation.
The Vulkan spec states: Each binary semaphore element of the pSignalSemaphores member of any element of pSubmits must be unsignaled when the semaphore signal operation it defines is executed on the device (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkQueueSubmit-pSignalSemaphores-00067)
Validation layer: vkQueueSubmit(): pSubmits[0].pSignalSemaphores[0] (VkSemaphore 0x60000000006) is being signaled by VkQueue 0x8f21c00, but it may still be in use by VkSwapchainKHR 0x240000000024.
Here are the most recently acquired image indices: 0, 1, 0, 2, [1], 0, 2, 0.
(brackets mark the last use of VkSemaphore 0x60000000006 in a presentation operation)
Swapchain image 1 was presented but was not re-acquired, so VkSemaphore 0x60000000006 may still be in use and cannot be safely reused with image index 0.
Vulkan insight: One solution is to assign each image its own semaphore. Here are some common methods to ensure that a semaphore passed to vkQueuePresentKHR is not in use and can be safely reused:
	a) Use a separate semaphore per swapchain image. Index these semaphores using the index of the acquired image.
	b) Consider the VK_KHR_swapchain_maintenance1 extension. It allows using a VkFence with the presentation operation.
The Vulkan spec states: Each binary semaphore element of the pSignalSemaphores member of any element of pSubmits must be unsignaled when the semaphore signal operation it defines is executed on the device (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkQueueSubmit-pSignalSemaphores-00067)
Validation layer: vkQueueSubmit(): pSubmits[0].pSignalSemaphores[0] (VkSemaphore 0xa000000000a) is being signaled by VkQueue 0x8f21c00, but it may still be in use by VkSwapchainKHR 0x240000000024.
Here are the most recently acquired image indices: 0, 2, 1, 0, [2], 0, 1, 0.
(brackets mark the last use of VkSemaphore 0xa000000000a in a presentation operation)
Swapchain image 2 was presented but was not re-acquired, so VkSemaphore 0xa000000000a may still be in use and cannot be safely reused with image index 0.
Vulkan insight: One solution is to assign each image its own semaphore. Here are some common methods to ensure that a semaphore passed to vkQueuePresentKHR is not in use and can be safely reused:
	a) Use a separate semaphore per swapchain image. Index these semaphores using the index of the acquired image.
	b) Consider the VK_KHR_swapchain_maintenance1 extension. It allows using a VkFence with the presentation operation.
The Vulkan spec states: Each binary semaphore element of the pSignalSemaphores member of any element of pSubmits must be unsignaled when the semaphore signal operation it defines is executed on the device (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkQueueSubmit-pSignalSemaphores-00067)
Validation layer: vkQueueSubmit(): pSubmits[0].pSignalSemaphores[0] (VkSemaphore 0xa000000000a) is being signaled by VkQueue 0x8f21c00, but it may still be in use by VkSwapchainKHR 0x240000000024.
Here are the most recently acquired image indices: 1, 2, 0, 1, [2], 0, 1, 0.
(brackets mark the last use of VkSemaphore 0xa000000000a in a presentation operation)
Swapchain image 2 was presented but was not re-acquired, so VkSemaphore 0xa000000000a may still be in use and cannot be safely reused with image index 0.
Vulkan insight: One solution is to assign each image its own semaphore. Here are some common methods to ensure that a semaphore passed to vkQueuePresentKHR is not in use and can be safely reused:
	a) Use a separate semaphore per swapchain image. Index these semaphores using the index of the acquired image.
	b) Consider the VK_KHR_swapchain_maintenance1 extension. It allows using a VkFence with the presentation operation.
The Vulkan spec states: Each binary semaphore element of the pSignalSemaphores member of any element of pSubmits must be unsignaled when the semaphore signal operation it defines is executed on the device (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkQueueSubmit-pSignalSemaphores-00067)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicated_message_limit value, this will be the last time reporting it).
vkQueueSubmit(): pSubmits[0].pSignalSemaphores[0] (VkSemaphore 0x80000000008) is being signaled by VkQueue 0x8f21c00, but it may still be in use by VkSwapchainKHR 0x240000000024.
Here are the most recently acquired image indices: 1, 2, 0, 1, [2], 0, 1, 0.
(brackets mark the last use of VkSemaphore 0x80000000008 in a presentation operation)
Swapchain image 2 was presented but was not re-acquired, so VkSemaphore 0x80000000008 may still be in use and cannot be safely reused with image index 0.
Vulkan insight: One solution is to assign each image its own semaphore. Here are some common methods to ensure that a semaphore passed to vkQueuePresentKHR is not in use and can be safely reused:
	a) Use a separate semaphore per swapchain image. Index these semaphores using the index of the acquired image.
	b) Consider the VK_KHR_swapchain_maintenance1 extension. It allows using a VkFence with the presentation operation.
The Vulkan spec states: Each binary semaphore element of the pSignalSemaphores member of any element of pSubmits must be unsignaled when the semaphore signal operation it defines is executed on the device (https://docs.vulkan.org/spec/latest/chapters/cmdbuffers.html#VUID-vkQueueSubmit-pSignalSemaphores-00067)
Window resized to 1866x716
Validation layer: vkAcquireNextImageKHR(): Semaphore must not have any pending operations.
The Vulkan spec states: If semaphore is not VK_NULL_HANDLE, it must not have any uncompleted signal or wait operations pending (https://docs.vulkan.org/spec/latest/chapters/VK_KHR_surface/wsi.html#VUID-vkAcquireNextImageKHR-semaphore-01779)
