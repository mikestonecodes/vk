

Build succeeded, launching vk...
DEBUG: Initializing GLFW platform
DEBUG: GLFW platform setup complete
Validation layer: linux_read_sorted_physical_devices:
Validation layer:      Original order:
Validation layer:            [0] NVIDIA GeForce RTX 4070 Laptop GPU
Validation layer:      Sorted order:
Validation layer:            [0] NVIDIA GeForce RTX 4070 Laptop GPU  
Validation layer: Copying old device 0 into new device 0
Validation layer: linux_read_sorted_physical_devices:
Validation layer:      Original order:
Validation layer:            [0] NVIDIA GeForce RTX 4070 Laptop GPU
Validation layer:      Sorted order:
Validation layer:            [0] NVIDIA GeForce RTX 4070 Laptop GPU  
Validation layer: Copying old device 0 into new device 0
Validation layer: linux_read_sorted_physical_devices:
Validation layer:      Original order:
Validation layer:            [0] NVIDIA GeForce RTX 4070 Laptop GPU
Validation layer:      Sorted order:
Validation layer:            [0] NVIDIA GeForce RTX 4070 Laptop GPU  
Validation layer: Copying old device 0 into new device 0
Validation layer: linux_read_sorted_physical_devices:
Validation layer:      Original order:
Validation layer:            [0] NVIDIA GeForce RTX 4070 Laptop GPU
Validation layer:      Sorted order:
Validation layer:            [0] NVIDIA GeForce RTX 4070 Laptop GPU  
Validation layer: Copying old device 0 into new device 0
Validation layer: Removing driver /usr/lib/libvulkan_intel.so due to not having any physical devices
Validation layer: Removing driver /usr/lib/libvulkan_intel_hasvk.so due to not having any physical devices
Validation layer: Inserted device layer "VK_LAYER_KHRONOS_validation" (/usr/lib/libVkLayer_khronos_validation.so)
Validation layer: Failed to find vkGetDeviceProcAddr in layer "/usr/lib/libVkLayer_MESA_device_select.so"
Validation layer: vkCreateDevice layer callstack setup to:
Validation layer:    <Application>
Validation layer:      ||
Validation layer:    <Loader>
Validation layer:      ||
Validation layer:    VK_LAYER_KHRONOS_validation
Validation layer:            Type: Explicit
Validation layer:            Enabled By: By the Application
Validation layer:            Manifest: /usr/share/vulkan/explicit_layer.d/VkLayer_khronos_validation.json
Validation layer:            Library:  /usr/lib/libVkLayer_khronos_validation.so
Validation layer:      ||
Validation layer:    <Device>
Validation layer:        Using "NVIDIA GeForce RTX 4070 Laptop GPU" with driver: "/usr/lib/libGLX_nvidia.so.0"
compiling shader:
compiling shader:
compiling shader:
compiling shader:
Validation layer: vkCreateShadersEXT(): pCreateInfos[0] SPIR-V Capability RuntimeDescriptorArray was declared, but one of the following requirements is required (VkPhysicalDeviceVulkan12Features::runtimeDescriptorArray).
The Vulkan spec states: If codeType is VK_SHADER_CODE_TYPE_SPIRV_EXT, and pCode declares any of the capabilities listed in the SPIR-V Environment appendix, one of the corresponding requirements must be satisfied (https://docs.vulkan.org/spec/latest/chapters/shaders.html#VUID-VkShaderCreateInfoEXT-pCode-08740)
compiling shader:
Validation layer: vkCreateShadersEXT(): pCreateInfos[0] SPIR-V Capability RuntimeDescriptorArray was declared, but one of the following requirements is required (VkPhysicalDeviceVulkan12Features::runtimeDescriptorArray).
The Vulkan spec states: If codeType is VK_SHADER_CODE_TYPE_SPIRV_EXT, and pCode declares any of the capabilities listed in the SPIR-V Environment appendix, one of the corresponding requirements must be satisfied (https://docs.vulkan.org/spec/latest/chapters/shaders.html#VUID-VkShaderCreateInfoEXT-pCode-08740)
compiling shader:
Validation layer: vkCreateShadersEXT(): pCreateInfos[0] SPIR-V Capability RuntimeDescriptorArray was declared, but one of the following requirements is required (VkPhysicalDeviceVulkan12Features::runtimeDescriptorArray).
The Vulkan spec states: If codeType is VK_SHADER_CODE_TYPE_SPIRV_EXT, and pCode declares any of the capabilities listed in the SPIR-V Environment appendix, one of the corresponding requirements must be satisfied (https://docs.vulkan.org/spec/latest/chapters/shaders.html#VUID-VkShaderCreateInfoEXT-pCode-08740)
Discovered 2 shaders: graphics.hlsl compute.hlsl 
Validation layer: vkAcquireNextImageKHR(): semaphore and fence are both VK_NULL_HANDLE.
The Vulkan spec states: semaphore and fence must not both be equal to VK_NULL_HANDLE (https://docs.vulkan.org/spec/latest/chapters/VK_KHR_surface/wsi.html#VUID-vkAcquireNextImageKHR-semaphore-01780)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE state is dynamic, but the command buffer never called vkCmdSetRasterizerDiscardEnable.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE dynamic state enabled, then vkCmdSetRasterizerDiscardEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04876)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_CULL_MODE state is dynamic, but the command buffer never called vkCmdSetCullMode.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_CULL_MODE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetCullMode must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07840)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, vkCmdSetDepthTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07843)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetStencilTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetStencilTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07847)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBiasEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBiasEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04877)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_POLYGON_MODE_EXT state is dynamic, but the command buffer never called vkCmdSetPolygonModeEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_POLYGON_MODE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetPolygonModeEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07621)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT state is dynamic, but the command buffer never called vkCmdSetRasterizationSamplesEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetRasterizationSamplesEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07622)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_SAMPLE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetSampleMaskEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SAMPLE_MASK_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetSampleMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07623)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBoundsTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the depthBounds feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBoundsTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07846)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetDepthClampEnableEXT.
The Vulkan spec states: If the depthClamp feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthClampEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07620)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToOneEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the alphaToOne feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToOneEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07625)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToCoverageEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToCoverageEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07624)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetLogicOpEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the logicOp feature is enabled, a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetLogicOpEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07626)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetColorBlendEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorBlendEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07627)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetColorWriteMaskEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorWriteMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07629)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetViewportWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetViewportWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-viewportCount-03417)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetScissorWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetScissorWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-scissorCount-03418)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE state is dynamic, but the command buffer never called vkCmdSetPrimitiveRestartEnable.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE dynamic state enabled then vkCmdSetPrimitiveRestartEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04879)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_VERTEX_INPUT_EXT state is dynamic, but the command buffer never called vkCmdSetVertexInputEXT.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_VERTEX_INPUT_EXT dynamic state enabled then vkCmdSetVertexInputEXT must have been called and not subsequently invalidated in the current command buffer prior to this draw command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04914)
Validation layer: vkCmdDraw(): VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]) was created with VK_SAMPLE_COUNT_1_BIT but the last call to vkCmdSetRasterizationSamplesEXT was set to Unhandled VkSampleCountFlagBits.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound, the current value of rasterizerDiscardEnable is VK_FALSE, and none of the following is enabled: the VK_AMD_mixed_attachment_samples extension the VK_NV_framebuffer_mixed_samples extension the multisampledRenderToSingleSampled feature then the current value of rasterizationSamples must be the same as the current color and/or depth/stencil attachments (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08644)
Validation layer: vkCmdDraw(): vkCmdSetColorBlendEquationEXT needs to be set for color attachmet index 0 (VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]))
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound was created with VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT and VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then either vkCmdSetColorBlendAdvancedEXT or vkCmdSetColorBlendEquationEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command for all active color attachments with the blendEnable current value of VK_TRUE (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-10864)
Validation layer: vkCmdDraw(): Shader objects must be used with dynamic rendering, but VkRenderPass VkRenderPass 0x90000000009 is active.
The Vulkan spec states: If a shader object is bound to any graphics stage, the current render pass instance must have been begun with vkCmdBeginRendering (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08876)
Validation layer: vkCmdDraw(): The combination of graphic shader objects bound is invalid, because shader stages VK_SHADER_STAGE_VERTEX_BIT (VkShaderEXT 0x220000000022) and VK_SHADER_STAGE_FRAGMENT_BIT (VkShaderEXT 0x230000000023) are bound with no other stages between them.
The VK_SHADER_STAGE_VERTEX_BIT shader was created with nextStage of VkShaderStageFlags(0) but needs to be VK_SHADER_STAGE_FRAGMENT_BIT.
The Vulkan spec states: For each shader object bound to a graphics stage, except for shader object bound to the last graphics stage in the logical pipeline, it must have been created with a nextStage including the corresponding bit to the shader object bound to the following graphics stage in the logical pipeline (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-nextStage-10745)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08685)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08686)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_GEOMETRY_BIT. (If the geometryShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the geometryShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_GEOMETRY_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08687)
Validation layer: vkCmdDraw(): The bound VK_SHADER_STAGE_VERTEX_BIT shader was created with a pushConstantRangeCount of 0 which doesn't match the bound VK_SHADER_STAGE_FRAGMENT_BIT shader create with a pushConstantRangeCount of 1.
The Vulkan spec states: All bound graphics shader objects must have been created with identical or identically defined push constant ranges (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08878)
Validation layer: vkAcquireNextImageKHR(): semaphore and fence are both VK_NULL_HANDLE.
The Vulkan spec states: semaphore and fence must not both be equal to VK_NULL_HANDLE (https://docs.vulkan.org/spec/latest/chapters/VK_KHR_surface/wsi.html#VUID-vkAcquireNextImageKHR-semaphore-01780)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE state is dynamic, but the command buffer never called vkCmdSetRasterizerDiscardEnable.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE dynamic state enabled, then vkCmdSetRasterizerDiscardEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04876)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_CULL_MODE state is dynamic, but the command buffer never called vkCmdSetCullMode.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_CULL_MODE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetCullMode must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07840)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, vkCmdSetDepthTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07843)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetStencilTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetStencilTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07847)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBiasEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBiasEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04877)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_POLYGON_MODE_EXT state is dynamic, but the command buffer never called vkCmdSetPolygonModeEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_POLYGON_MODE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetPolygonModeEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07621)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT state is dynamic, but the command buffer never called vkCmdSetRasterizationSamplesEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetRasterizationSamplesEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07622)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_SAMPLE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetSampleMaskEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SAMPLE_MASK_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetSampleMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07623)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBoundsTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the depthBounds feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBoundsTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07846)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetDepthClampEnableEXT.
The Vulkan spec states: If the depthClamp feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthClampEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07620)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToOneEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the alphaToOne feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToOneEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07625)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToCoverageEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToCoverageEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07624)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetLogicOpEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the logicOp feature is enabled, a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetLogicOpEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07626)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetColorBlendEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorBlendEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07627)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetColorWriteMaskEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorWriteMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07629)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetViewportWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetViewportWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-viewportCount-03417)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetScissorWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetScissorWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-scissorCount-03418)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE state is dynamic, but the command buffer never called vkCmdSetPrimitiveRestartEnable.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE dynamic state enabled then vkCmdSetPrimitiveRestartEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04879)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_VERTEX_INPUT_EXT state is dynamic, but the command buffer never called vkCmdSetVertexInputEXT.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_VERTEX_INPUT_EXT dynamic state enabled then vkCmdSetVertexInputEXT must have been called and not subsequently invalidated in the current command buffer prior to this draw command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04914)
Validation layer: vkCmdDraw(): VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]) was created with VK_SAMPLE_COUNT_1_BIT but the last call to vkCmdSetRasterizationSamplesEXT was set to Unhandled VkSampleCountFlagBits.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound, the current value of rasterizerDiscardEnable is VK_FALSE, and none of the following is enabled: the VK_AMD_mixed_attachment_samples extension the VK_NV_framebuffer_mixed_samples extension the multisampledRenderToSingleSampled feature then the current value of rasterizationSamples must be the same as the current color and/or depth/stencil attachments (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08644)
Validation layer: vkCmdDraw(): vkCmdSetColorBlendEquationEXT needs to be set for color attachmet index 0 (VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]))
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound was created with VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT and VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then either vkCmdSetColorBlendAdvancedEXT or vkCmdSetColorBlendEquationEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command for all active color attachments with the blendEnable current value of VK_TRUE (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-10864)
Validation layer: vkCmdDraw(): Shader objects must be used with dynamic rendering, but VkRenderPass VkRenderPass 0x90000000009 is active.
The Vulkan spec states: If a shader object is bound to any graphics stage, the current render pass instance must have been begun with vkCmdBeginRendering (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08876)
Validation layer: vkCmdDraw(): The combination of graphic shader objects bound is invalid, because shader stages VK_SHADER_STAGE_VERTEX_BIT (VkShaderEXT 0x220000000022) and VK_SHADER_STAGE_FRAGMENT_BIT (VkShaderEXT 0x230000000023) are bound with no other stages between them.
The VK_SHADER_STAGE_VERTEX_BIT shader was created with nextStage of VkShaderStageFlags(0) but needs to be VK_SHADER_STAGE_FRAGMENT_BIT.
The Vulkan spec states: For each shader object bound to a graphics stage, except for shader object bound to the last graphics stage in the logical pipeline, it must have been created with a nextStage including the corresponding bit to the shader object bound to the following graphics stage in the logical pipeline (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-nextStage-10745)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08685)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08686)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_GEOMETRY_BIT. (If the geometryShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the geometryShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_GEOMETRY_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08687)
Validation layer: vkCmdDraw(): The bound VK_SHADER_STAGE_VERTEX_BIT shader was created with a pushConstantRangeCount of 0 which doesn't match the bound VK_SHADER_STAGE_FRAGMENT_BIT shader create with a pushConstantRangeCount of 1.
The Vulkan spec states: All bound graphics shader objects must have been created with identical or identically defined push constant ranges (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08878)
Window resized to 1856x1016
compiling shader:
compiling shader:
compiling shader:
compiling shader:
Validation layer: vkCreateShadersEXT(): pCreateInfos[0] SPIR-V Capability RuntimeDescriptorArray was declared, but one of the following requirements is required (VkPhysicalDeviceVulkan12Features::runtimeDescriptorArray).
The Vulkan spec states: If codeType is VK_SHADER_CODE_TYPE_SPIRV_EXT, and pCode declares any of the capabilities listed in the SPIR-V Environment appendix, one of the corresponding requirements must be satisfied (https://docs.vulkan.org/spec/latest/chapters/shaders.html#VUID-VkShaderCreateInfoEXT-pCode-08740)
compiling shader:
Validation layer: vkCreateShadersEXT(): pCreateInfos[0] SPIR-V Capability RuntimeDescriptorArray was declared, but one of the following requirements is required (VkPhysicalDeviceVulkan12Features::runtimeDescriptorArray).
The Vulkan spec states: If codeType is VK_SHADER_CODE_TYPE_SPIRV_EXT, and pCode declares any of the capabilities listed in the SPIR-V Environment appendix, one of the corresponding requirements must be satisfied (https://docs.vulkan.org/spec/latest/chapters/shaders.html#VUID-VkShaderCreateInfoEXT-pCode-08740)
compiling shader:
Validation layer: vkCreateShadersEXT(): pCreateInfos[0] SPIR-V Capability RuntimeDescriptorArray was declared, but one of the following requirements is required (VkPhysicalDeviceVulkan12Features::runtimeDescriptorArray).
The Vulkan spec states: If codeType is VK_SHADER_CODE_TYPE_SPIRV_EXT, and pCode declares any of the capabilities listed in the SPIR-V Environment appendix, one of the corresponding requirements must be satisfied (https://docs.vulkan.org/spec/latest/chapters/shaders.html#VUID-VkShaderCreateInfoEXT-pCode-08740)
Validation layer: vkAcquireNextImageKHR(): semaphore and fence are both VK_NULL_HANDLE.
The Vulkan spec states: semaphore and fence must not both be equal to VK_NULL_HANDLE (https://docs.vulkan.org/spec/latest/chapters/VK_KHR_surface/wsi.html#VUID-vkAcquireNextImageKHR-semaphore-01780)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE state is dynamic, but the command buffer never called vkCmdSetRasterizerDiscardEnable.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE dynamic state enabled, then vkCmdSetRasterizerDiscardEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04876)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_CULL_MODE state is dynamic, but the command buffer never called vkCmdSetCullMode.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_CULL_MODE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetCullMode must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07840)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, vkCmdSetDepthTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07843)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetStencilTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetStencilTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07847)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBiasEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBiasEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04877)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_POLYGON_MODE_EXT state is dynamic, but the command buffer never called vkCmdSetPolygonModeEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_POLYGON_MODE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetPolygonModeEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07621)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT state is dynamic, but the command buffer never called vkCmdSetRasterizationSamplesEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetRasterizationSamplesEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07622)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_SAMPLE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetSampleMaskEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SAMPLE_MASK_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetSampleMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07623)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBoundsTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the depthBounds feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBoundsTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07846)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetDepthClampEnableEXT.
The Vulkan spec states: If the depthClamp feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthClampEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07620)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToOneEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the alphaToOne feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToOneEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07625)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToCoverageEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToCoverageEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07624)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetLogicOpEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the logicOp feature is enabled, a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetLogicOpEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07626)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetColorBlendEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorBlendEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07627)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetColorWriteMaskEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorWriteMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07629)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetViewportWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetViewportWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-viewportCount-03417)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetScissorWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetScissorWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-scissorCount-03418)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE state is dynamic, but the command buffer never called vkCmdSetPrimitiveRestartEnable.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE dynamic state enabled then vkCmdSetPrimitiveRestartEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04879)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_VERTEX_INPUT_EXT state is dynamic, but the command buffer never called vkCmdSetVertexInputEXT.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_VERTEX_INPUT_EXT dynamic state enabled then vkCmdSetVertexInputEXT must have been called and not subsequently invalidated in the current command buffer prior to this draw command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04914)
Validation layer: vkCmdDraw(): VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]) was created with VK_SAMPLE_COUNT_1_BIT but the last call to vkCmdSetRasterizationSamplesEXT was set to Unhandled VkSampleCountFlagBits.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound, the current value of rasterizerDiscardEnable is VK_FALSE, and none of the following is enabled: the VK_AMD_mixed_attachment_samples extension the VK_NV_framebuffer_mixed_samples extension the multisampledRenderToSingleSampled feature then the current value of rasterizationSamples must be the same as the current color and/or depth/stencil attachments (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08644)
Validation layer: vkCmdDraw(): vkCmdSetColorBlendEquationEXT needs to be set for color attachmet index 0 (VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]))
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound was created with VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT and VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then either vkCmdSetColorBlendAdvancedEXT or vkCmdSetColorBlendEquationEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command for all active color attachments with the blendEnable current value of VK_TRUE (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-10864)
Validation layer: vkCmdDraw(): Shader objects must be used with dynamic rendering, but VkRenderPass VkRenderPass 0x280000000028 is active.
The Vulkan spec states: If a shader object is bound to any graphics stage, the current render pass instance must have been begun with vkCmdBeginRendering (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08876)
Validation layer: vkCmdDraw(): The combination of graphic shader objects bound is invalid, because shader stages VK_SHADER_STAGE_VERTEX_BIT (VkShaderEXT 0x3e000000003e) and VK_SHADER_STAGE_FRAGMENT_BIT (VkShaderEXT 0x3f000000003f) are bound with no other stages between them.
The VK_SHADER_STAGE_VERTEX_BIT shader was created with nextStage of VkShaderStageFlags(0) but needs to be VK_SHADER_STAGE_FRAGMENT_BIT.
The Vulkan spec states: For each shader object bound to a graphics stage, except for shader object bound to the last graphics stage in the logical pipeline, it must have been created with a nextStage including the corresponding bit to the shader object bound to the following graphics stage in the logical pipeline (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-nextStage-10745)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08685)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08686)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_GEOMETRY_BIT. (If the geometryShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the geometryShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_GEOMETRY_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08687)
Validation layer: vkCmdDraw(): The bound VK_SHADER_STAGE_VERTEX_BIT shader was created with a pushConstantRangeCount of 0 which doesn't match the bound VK_SHADER_STAGE_FRAGMENT_BIT shader create with a pushConstantRangeCount of 1.
The Vulkan spec states: All bound graphics shader objects must have been created with identical or identically defined push constant ranges (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08878)
Validation layer: vkAcquireNextImageKHR(): semaphore and fence are both VK_NULL_HANDLE.
The Vulkan spec states: semaphore and fence must not both be equal to VK_NULL_HANDLE (https://docs.vulkan.org/spec/latest/chapters/VK_KHR_surface/wsi.html#VUID-vkAcquireNextImageKHR-semaphore-01780)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE state is dynamic, but the command buffer never called vkCmdSetRasterizerDiscardEnable.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE dynamic state enabled, then vkCmdSetRasterizerDiscardEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04876)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_CULL_MODE state is dynamic, but the command buffer never called vkCmdSetCullMode.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_CULL_MODE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetCullMode must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07840)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, vkCmdSetDepthTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07843)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetStencilTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetStencilTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07847)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBiasEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBiasEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04877)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_POLYGON_MODE_EXT state is dynamic, but the command buffer never called vkCmdSetPolygonModeEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_POLYGON_MODE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetPolygonModeEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07621)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT state is dynamic, but the command buffer never called vkCmdSetRasterizationSamplesEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetRasterizationSamplesEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07622)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_SAMPLE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetSampleMaskEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SAMPLE_MASK_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetSampleMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07623)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBoundsTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the depthBounds feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBoundsTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07846)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetDepthClampEnableEXT.
The Vulkan spec states: If the depthClamp feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthClampEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07620)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToOneEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the alphaToOne feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToOneEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07625)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToCoverageEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToCoverageEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07624)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetLogicOpEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the logicOp feature is enabled, a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetLogicOpEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07626)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetColorBlendEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorBlendEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07627)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetColorWriteMaskEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorWriteMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07629)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetViewportWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetViewportWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-viewportCount-03417)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetScissorWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetScissorWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-scissorCount-03418)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE state is dynamic, but the command buffer never called vkCmdSetPrimitiveRestartEnable.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE dynamic state enabled then vkCmdSetPrimitiveRestartEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04879)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_VERTEX_INPUT_EXT state is dynamic, but the command buffer never called vkCmdSetVertexInputEXT.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_VERTEX_INPUT_EXT dynamic state enabled then vkCmdSetVertexInputEXT must have been called and not subsequently invalidated in the current command buffer prior to this draw command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04914)
Validation layer: vkCmdDraw(): VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]) was created with VK_SAMPLE_COUNT_1_BIT but the last call to vkCmdSetRasterizationSamplesEXT was set to Unhandled VkSampleCountFlagBits.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound, the current value of rasterizerDiscardEnable is VK_FALSE, and none of the following is enabled: the VK_AMD_mixed_attachment_samples extension the VK_NV_framebuffer_mixed_samples extension the multisampledRenderToSingleSampled feature then the current value of rasterizationSamples must be the same as the current color and/or depth/stencil attachments (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08644)
Validation layer: vkCmdDraw(): vkCmdSetColorBlendEquationEXT needs to be set for color attachmet index 0 (VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]))
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound was created with VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT and VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then either vkCmdSetColorBlendAdvancedEXT or vkCmdSetColorBlendEquationEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command for all active color attachments with the blendEnable current value of VK_TRUE (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-10864)
Validation layer: vkCmdDraw(): Shader objects must be used with dynamic rendering, but VkRenderPass VkRenderPass 0x280000000028 is active.
The Vulkan spec states: If a shader object is bound to any graphics stage, the current render pass instance must have been begun with vkCmdBeginRendering (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08876)
Validation layer: vkCmdDraw(): The combination of graphic shader objects bound is invalid, because shader stages VK_SHADER_STAGE_VERTEX_BIT (VkShaderEXT 0x3e000000003e) and VK_SHADER_STAGE_FRAGMENT_BIT (VkShaderEXT 0x3f000000003f) are bound with no other stages between them.
The VK_SHADER_STAGE_VERTEX_BIT shader was created with nextStage of VkShaderStageFlags(0) but needs to be VK_SHADER_STAGE_FRAGMENT_BIT.
The Vulkan spec states: For each shader object bound to a graphics stage, except for shader object bound to the last graphics stage in the logical pipeline, it must have been created with a nextStage including the corresponding bit to the shader object bound to the following graphics stage in the logical pipeline (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-nextStage-10745)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08685)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08686)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_GEOMETRY_BIT. (If the geometryShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the geometryShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_GEOMETRY_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08687)
Validation layer: vkCmdDraw(): The bound VK_SHADER_STAGE_VERTEX_BIT shader was created with a pushConstantRangeCount of 0 which doesn't match the bound VK_SHADER_STAGE_FRAGMENT_BIT shader create with a pushConstantRangeCount of 1.
The Vulkan spec states: All bound graphics shader objects must have been created with identical or identically defined push constant ranges (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08878)
Validation layer: vkAcquireNextImageKHR(): semaphore and fence are both VK_NULL_HANDLE.
The Vulkan spec states: semaphore and fence must not both be equal to VK_NULL_HANDLE (https://docs.vulkan.org/spec/latest/chapters/VK_KHR_surface/wsi.html#VUID-vkAcquireNextImageKHR-semaphore-01780)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE state is dynamic, but the command buffer never called vkCmdSetRasterizerDiscardEnable.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE dynamic state enabled, then vkCmdSetRasterizerDiscardEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04876)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_CULL_MODE state is dynamic, but the command buffer never called vkCmdSetCullMode.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_CULL_MODE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetCullMode must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07840)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, vkCmdSetDepthTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07843)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetStencilTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetStencilTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07847)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBiasEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBiasEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04877)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_POLYGON_MODE_EXT state is dynamic, but the command buffer never called vkCmdSetPolygonModeEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_POLYGON_MODE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetPolygonModeEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07621)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT state is dynamic, but the command buffer never called vkCmdSetRasterizationSamplesEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetRasterizationSamplesEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07622)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_SAMPLE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetSampleMaskEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SAMPLE_MASK_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetSampleMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07623)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBoundsTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the depthBounds feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBoundsTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07846)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetDepthClampEnableEXT.
The Vulkan spec states: If the depthClamp feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthClampEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07620)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToOneEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the alphaToOne feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToOneEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07625)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToCoverageEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToCoverageEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07624)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetLogicOpEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the logicOp feature is enabled, a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetLogicOpEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07626)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetColorBlendEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorBlendEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07627)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetColorWriteMaskEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorWriteMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07629)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetViewportWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetViewportWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-viewportCount-03417)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetScissorWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetScissorWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-scissorCount-03418)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE state is dynamic, but the command buffer never called vkCmdSetPrimitiveRestartEnable.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE dynamic state enabled then vkCmdSetPrimitiveRestartEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04879)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_VERTEX_INPUT_EXT state is dynamic, but the command buffer never called vkCmdSetVertexInputEXT.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_VERTEX_INPUT_EXT dynamic state enabled then vkCmdSetVertexInputEXT must have been called and not subsequently invalidated in the current command buffer prior to this draw command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04914)
Validation layer: vkCmdDraw(): VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]) was created with VK_SAMPLE_COUNT_1_BIT but the last call to vkCmdSetRasterizationSamplesEXT was set to Unhandled VkSampleCountFlagBits.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound, the current value of rasterizerDiscardEnable is VK_FALSE, and none of the following is enabled: the VK_AMD_mixed_attachment_samples extension the VK_NV_framebuffer_mixed_samples extension the multisampledRenderToSingleSampled feature then the current value of rasterizationSamples must be the same as the current color and/or depth/stencil attachments (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08644)
Validation layer: vkCmdDraw(): vkCmdSetColorBlendEquationEXT needs to be set for color attachmet index 0 (VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]))
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound was created with VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT and VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then either vkCmdSetColorBlendAdvancedEXT or vkCmdSetColorBlendEquationEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command for all active color attachments with the blendEnable current value of VK_TRUE (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-10864)
Validation layer: vkCmdDraw(): Shader objects must be used with dynamic rendering, but VkRenderPass VkRenderPass 0x280000000028 is active.
The Vulkan spec states: If a shader object is bound to any graphics stage, the current render pass instance must have been begun with vkCmdBeginRendering (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08876)
Validation layer: vkCmdDraw(): The combination of graphic shader objects bound is invalid, because shader stages VK_SHADER_STAGE_VERTEX_BIT (VkShaderEXT 0x3e000000003e) and VK_SHADER_STAGE_FRAGMENT_BIT (VkShaderEXT 0x3f000000003f) are bound with no other stages between them.
The VK_SHADER_STAGE_VERTEX_BIT shader was created with nextStage of VkShaderStageFlags(0) but needs to be VK_SHADER_STAGE_FRAGMENT_BIT.
The Vulkan spec states: For each shader object bound to a graphics stage, except for shader object bound to the last graphics stage in the logical pipeline, it must have been created with a nextStage including the corresponding bit to the shader object bound to the following graphics stage in the logical pipeline (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-nextStage-10745)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08685)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08686)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_GEOMETRY_BIT. (If the geometryShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the geometryShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_GEOMETRY_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08687)
Validation layer: vkCmdDraw(): The bound VK_SHADER_STAGE_VERTEX_BIT shader was created with a pushConstantRangeCount of 0 which doesn't match the bound VK_SHADER_STAGE_FRAGMENT_BIT shader create with a pushConstantRangeCount of 1.
The Vulkan spec states: All bound graphics shader objects must have been created with identical or identically defined push constant ranges (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08878)
Validation layer: vkAcquireNextImageKHR(): semaphore and fence are both VK_NULL_HANDLE.
The Vulkan spec states: semaphore and fence must not both be equal to VK_NULL_HANDLE (https://docs.vulkan.org/spec/latest/chapters/VK_KHR_surface/wsi.html#VUID-vkAcquireNextImageKHR-semaphore-01780)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE state is dynamic, but the command buffer never called vkCmdSetRasterizerDiscardEnable.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE dynamic state enabled, then vkCmdSetRasterizerDiscardEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04876)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_CULL_MODE state is dynamic, but the command buffer never called vkCmdSetCullMode.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_CULL_MODE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetCullMode must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07840)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, vkCmdSetDepthTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07843)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetStencilTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetStencilTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07847)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBiasEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBiasEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04877)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_POLYGON_MODE_EXT state is dynamic, but the command buffer never called vkCmdSetPolygonModeEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_POLYGON_MODE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetPolygonModeEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07621)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT state is dynamic, but the command buffer never called vkCmdSetRasterizationSamplesEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetRasterizationSamplesEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07622)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_SAMPLE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetSampleMaskEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SAMPLE_MASK_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetSampleMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07623)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBoundsTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the depthBounds feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBoundsTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07846)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetDepthClampEnableEXT.
The Vulkan spec states: If the depthClamp feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthClampEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07620)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToOneEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the alphaToOne feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToOneEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07625)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToCoverageEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToCoverageEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07624)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetLogicOpEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the logicOp feature is enabled, a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetLogicOpEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07626)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetColorBlendEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorBlendEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07627)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetColorWriteMaskEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorWriteMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07629)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetViewportWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetViewportWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-viewportCount-03417)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetScissorWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetScissorWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-scissorCount-03418)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE state is dynamic, but the command buffer never called vkCmdSetPrimitiveRestartEnable.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE dynamic state enabled then vkCmdSetPrimitiveRestartEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04879)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_VERTEX_INPUT_EXT state is dynamic, but the command buffer never called vkCmdSetVertexInputEXT.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_VERTEX_INPUT_EXT dynamic state enabled then vkCmdSetVertexInputEXT must have been called and not subsequently invalidated in the current command buffer prior to this draw command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04914)
Validation layer: vkCmdDraw(): VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]) was created with VK_SAMPLE_COUNT_1_BIT but the last call to vkCmdSetRasterizationSamplesEXT was set to Unhandled VkSampleCountFlagBits.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound, the current value of rasterizerDiscardEnable is VK_FALSE, and none of the following is enabled: the VK_AMD_mixed_attachment_samples extension the VK_NV_framebuffer_mixed_samples extension the multisampledRenderToSingleSampled feature then the current value of rasterizationSamples must be the same as the current color and/or depth/stencil attachments (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08644)
Validation layer: vkCmdDraw(): vkCmdSetColorBlendEquationEXT needs to be set for color attachmet index 0 (VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]))
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound was created with VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT and VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then either vkCmdSetColorBlendAdvancedEXT or vkCmdSetColorBlendEquationEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command for all active color attachments with the blendEnable current value of VK_TRUE (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-10864)
Validation layer: vkCmdDraw(): Shader objects must be used with dynamic rendering, but VkRenderPass VkRenderPass 0x280000000028 is active.
The Vulkan spec states: If a shader object is bound to any graphics stage, the current render pass instance must have been begun with vkCmdBeginRendering (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08876)
Validation layer: vkCmdDraw(): The combination of graphic shader objects bound is invalid, because shader stages VK_SHADER_STAGE_VERTEX_BIT (VkShaderEXT 0x3e000000003e) and VK_SHADER_STAGE_FRAGMENT_BIT (VkShaderEXT 0x3f000000003f) are bound with no other stages between them.
The VK_SHADER_STAGE_VERTEX_BIT shader was created with nextStage of VkShaderStageFlags(0) but needs to be VK_SHADER_STAGE_FRAGMENT_BIT.
The Vulkan spec states: For each shader object bound to a graphics stage, except for shader object bound to the last graphics stage in the logical pipeline, it must have been created with a nextStage including the corresponding bit to the shader object bound to the following graphics stage in the logical pipeline (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-nextStage-10745)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08685)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08686)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_GEOMETRY_BIT. (If the geometryShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the geometryShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_GEOMETRY_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08687)
Validation layer: vkCmdDraw(): The bound VK_SHADER_STAGE_VERTEX_BIT shader was created with a pushConstantRangeCount of 0 which doesn't match the bound VK_SHADER_STAGE_FRAGMENT_BIT shader create with a pushConstantRangeCount of 1.
The Vulkan spec states: All bound graphics shader objects must have been created with identical or identically defined push constant ranges (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08878)
Validation layer: vkAcquireNextImageKHR(): semaphore and fence are both VK_NULL_HANDLE.
The Vulkan spec states: semaphore and fence must not both be equal to VK_NULL_HANDLE (https://docs.vulkan.org/spec/latest/chapters/VK_KHR_surface/wsi.html#VUID-vkAcquireNextImageKHR-semaphore-01780)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE state is dynamic, but the command buffer never called vkCmdSetRasterizerDiscardEnable.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE dynamic state enabled, then vkCmdSetRasterizerDiscardEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04876)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_CULL_MODE state is dynamic, but the command buffer never called vkCmdSetCullMode.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_CULL_MODE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetCullMode must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07840)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, vkCmdSetDepthTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07843)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetStencilTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetStencilTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07847)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBiasEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBiasEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04877)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_POLYGON_MODE_EXT state is dynamic, but the command buffer never called vkCmdSetPolygonModeEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_POLYGON_MODE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetPolygonModeEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07621)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT state is dynamic, but the command buffer never called vkCmdSetRasterizationSamplesEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetRasterizationSamplesEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07622)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_SAMPLE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetSampleMaskEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SAMPLE_MASK_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetSampleMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07623)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBoundsTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the depthBounds feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBoundsTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07846)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetDepthClampEnableEXT.
The Vulkan spec states: If the depthClamp feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthClampEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07620)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToOneEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the alphaToOne feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToOneEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07625)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToCoverageEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToCoverageEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07624)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetLogicOpEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the logicOp feature is enabled, a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetLogicOpEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07626)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetColorBlendEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorBlendEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07627)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetColorWriteMaskEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorWriteMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07629)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetViewportWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetViewportWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-viewportCount-03417)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetScissorWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetScissorWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-scissorCount-03418)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE state is dynamic, but the command buffer never called vkCmdSetPrimitiveRestartEnable.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE dynamic state enabled then vkCmdSetPrimitiveRestartEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04879)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_VERTEX_INPUT_EXT state is dynamic, but the command buffer never called vkCmdSetVertexInputEXT.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_VERTEX_INPUT_EXT dynamic state enabled then vkCmdSetVertexInputEXT must have been called and not subsequently invalidated in the current command buffer prior to this draw command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04914)
Validation layer: vkCmdDraw(): VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]) was created with VK_SAMPLE_COUNT_1_BIT but the last call to vkCmdSetRasterizationSamplesEXT was set to Unhandled VkSampleCountFlagBits.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound, the current value of rasterizerDiscardEnable is VK_FALSE, and none of the following is enabled: the VK_AMD_mixed_attachment_samples extension the VK_NV_framebuffer_mixed_samples extension the multisampledRenderToSingleSampled feature then the current value of rasterizationSamples must be the same as the current color and/or depth/stencil attachments (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08644)
Validation layer: vkCmdDraw(): vkCmdSetColorBlendEquationEXT needs to be set for color attachmet index 0 (VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]))
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound was created with VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT and VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then either vkCmdSetColorBlendAdvancedEXT or vkCmdSetColorBlendEquationEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command for all active color attachments with the blendEnable current value of VK_TRUE (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-10864)
Validation layer: vkCmdDraw(): Shader objects must be used with dynamic rendering, but VkRenderPass VkRenderPass 0x280000000028 is active.
The Vulkan spec states: If a shader object is bound to any graphics stage, the current render pass instance must have been begun with vkCmdBeginRendering (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08876)
Validation layer: vkCmdDraw(): The combination of graphic shader objects bound is invalid, because shader stages VK_SHADER_STAGE_VERTEX_BIT (VkShaderEXT 0x3e000000003e) and VK_SHADER_STAGE_FRAGMENT_BIT (VkShaderEXT 0x3f000000003f) are bound with no other stages between them.
The VK_SHADER_STAGE_VERTEX_BIT shader was created with nextStage of VkShaderStageFlags(0) but needs to be VK_SHADER_STAGE_FRAGMENT_BIT.
The Vulkan spec states: For each shader object bound to a graphics stage, except for shader object bound to the last graphics stage in the logical pipeline, it must have been created with a nextStage including the corresponding bit to the shader object bound to the following graphics stage in the logical pipeline (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-nextStage-10745)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08685)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08686)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_GEOMETRY_BIT. (If the geometryShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the geometryShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_GEOMETRY_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08687)
Validation layer: vkCmdDraw(): The bound VK_SHADER_STAGE_VERTEX_BIT shader was created with a pushConstantRangeCount of 0 which doesn't match the bound VK_SHADER_STAGE_FRAGMENT_BIT shader create with a pushConstantRangeCount of 1.
The Vulkan spec states: All bound graphics shader objects must have been created with identical or identically defined push constant ranges (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08878)
Validation layer: vkAcquireNextImageKHR(): semaphore and fence are both VK_NULL_HANDLE.
The Vulkan spec states: semaphore and fence must not both be equal to VK_NULL_HANDLE (https://docs.vulkan.org/spec/latest/chapters/VK_KHR_surface/wsi.html#VUID-vkAcquireNextImageKHR-semaphore-01780)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE state is dynamic, but the command buffer never called vkCmdSetRasterizerDiscardEnable.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE dynamic state enabled, then vkCmdSetRasterizerDiscardEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04876)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_CULL_MODE state is dynamic, but the command buffer never called vkCmdSetCullMode.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_CULL_MODE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetCullMode must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07840)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, vkCmdSetDepthTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07843)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetStencilTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetStencilTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07847)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBiasEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBiasEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04877)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_POLYGON_MODE_EXT state is dynamic, but the command buffer never called vkCmdSetPolygonModeEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_POLYGON_MODE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetPolygonModeEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07621)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT state is dynamic, but the command buffer never called vkCmdSetRasterizationSamplesEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetRasterizationSamplesEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07622)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_SAMPLE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetSampleMaskEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SAMPLE_MASK_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetSampleMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07623)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBoundsTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the depthBounds feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBoundsTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07846)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetDepthClampEnableEXT.
The Vulkan spec states: If the depthClamp feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthClampEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07620)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToOneEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the alphaToOne feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToOneEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07625)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToCoverageEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToCoverageEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07624)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetLogicOpEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the logicOp feature is enabled, a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetLogicOpEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07626)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetColorBlendEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorBlendEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07627)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetColorWriteMaskEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorWriteMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07629)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetViewportWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetViewportWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-viewportCount-03417)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetScissorWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetScissorWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-scissorCount-03418)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE state is dynamic, but the command buffer never called vkCmdSetPrimitiveRestartEnable.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE dynamic state enabled then vkCmdSetPrimitiveRestartEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04879)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_VERTEX_INPUT_EXT state is dynamic, but the command buffer never called vkCmdSetVertexInputEXT.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_VERTEX_INPUT_EXT dynamic state enabled then vkCmdSetVertexInputEXT must have been called and not subsequently invalidated in the current command buffer prior to this draw command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04914)
Validation layer: vkCmdDraw(): VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]) was created with VK_SAMPLE_COUNT_1_BIT but the last call to vkCmdSetRasterizationSamplesEXT was set to Unhandled VkSampleCountFlagBits.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound, the current value of rasterizerDiscardEnable is VK_FALSE, and none of the following is enabled: the VK_AMD_mixed_attachment_samples extension the VK_NV_framebuffer_mixed_samples extension the multisampledRenderToSingleSampled feature then the current value of rasterizationSamples must be the same as the current color and/or depth/stencil attachments (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08644)
Validation layer: vkCmdDraw(): vkCmdSetColorBlendEquationEXT needs to be set for color attachmet index 0 (VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]))
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound was created with VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT and VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then either vkCmdSetColorBlendAdvancedEXT or vkCmdSetColorBlendEquationEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command for all active color attachments with the blendEnable current value of VK_TRUE (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-10864)
Validation layer: vkCmdDraw(): Shader objects must be used with dynamic rendering, but VkRenderPass VkRenderPass 0x280000000028 is active.
The Vulkan spec states: If a shader object is bound to any graphics stage, the current render pass instance must have been begun with vkCmdBeginRendering (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08876)
Validation layer: vkCmdDraw(): The combination of graphic shader objects bound is invalid, because shader stages VK_SHADER_STAGE_VERTEX_BIT (VkShaderEXT 0x3e000000003e) and VK_SHADER_STAGE_FRAGMENT_BIT (VkShaderEXT 0x3f000000003f) are bound with no other stages between them.
The VK_SHADER_STAGE_VERTEX_BIT shader was created with nextStage of VkShaderStageFlags(0) but needs to be VK_SHADER_STAGE_FRAGMENT_BIT.
The Vulkan spec states: For each shader object bound to a graphics stage, except for shader object bound to the last graphics stage in the logical pipeline, it must have been created with a nextStage including the corresponding bit to the shader object bound to the following graphics stage in the logical pipeline (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-nextStage-10745)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08685)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08686)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_GEOMETRY_BIT. (If the geometryShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the geometryShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_GEOMETRY_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08687)
Validation layer: vkCmdDraw(): The bound VK_SHADER_STAGE_VERTEX_BIT shader was created with a pushConstantRangeCount of 0 which doesn't match the bound VK_SHADER_STAGE_FRAGMENT_BIT shader create with a pushConstantRangeCount of 1.
The Vulkan spec states: All bound graphics shader objects must have been created with identical or identically defined push constant ranges (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08878)
Validation layer: vkAcquireNextImageKHR(): semaphore and fence are both VK_NULL_HANDLE.
The Vulkan spec states: semaphore and fence must not both be equal to VK_NULL_HANDLE (https://docs.vulkan.org/spec/latest/chapters/VK_KHR_surface/wsi.html#VUID-vkAcquireNextImageKHR-semaphore-01780)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE state is dynamic, but the command buffer never called vkCmdSetRasterizerDiscardEnable.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE dynamic state enabled, then vkCmdSetRasterizerDiscardEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04876)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_CULL_MODE state is dynamic, but the command buffer never called vkCmdSetCullMode.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_CULL_MODE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetCullMode must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07840)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, vkCmdSetDepthTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07843)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetStencilTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetStencilTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07847)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBiasEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBiasEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04877)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_POLYGON_MODE_EXT state is dynamic, but the command buffer never called vkCmdSetPolygonModeEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_POLYGON_MODE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetPolygonModeEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07621)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT state is dynamic, but the command buffer never called vkCmdSetRasterizationSamplesEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetRasterizationSamplesEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07622)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_SAMPLE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetSampleMaskEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SAMPLE_MASK_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetSampleMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07623)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBoundsTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the depthBounds feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBoundsTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07846)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetDepthClampEnableEXT.
The Vulkan spec states: If the depthClamp feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthClampEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07620)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToOneEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the alphaToOne feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToOneEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07625)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToCoverageEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToCoverageEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07624)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetLogicOpEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the logicOp feature is enabled, a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetLogicOpEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07626)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetColorBlendEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorBlendEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07627)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetColorWriteMaskEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorWriteMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07629)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetViewportWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetViewportWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-viewportCount-03417)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetScissorWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetScissorWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-scissorCount-03418)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE state is dynamic, but the command buffer never called vkCmdSetPrimitiveRestartEnable.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE dynamic state enabled then vkCmdSetPrimitiveRestartEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04879)
Validation layer: vkCmdDraw(): VK_DYNAMIC_STATE_VERTEX_INPUT_EXT state is dynamic, but the command buffer never called vkCmdSetVertexInputEXT.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_VERTEX_INPUT_EXT dynamic state enabled then vkCmdSetVertexInputEXT must have been called and not subsequently invalidated in the current command buffer prior to this draw command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04914)
Validation layer: vkCmdDraw(): VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]) was created with VK_SAMPLE_COUNT_1_BIT but the last call to vkCmdSetRasterizationSamplesEXT was set to Unhandled VkSampleCountFlagBits.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound, the current value of rasterizerDiscardEnable is VK_FALSE, and none of the following is enabled: the VK_AMD_mixed_attachment_samples extension the VK_NV_framebuffer_mixed_samples extension the multisampledRenderToSingleSampled feature then the current value of rasterizationSamples must be the same as the current color and/or depth/stencil attachments (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08644)
Validation layer: vkCmdDraw(): vkCmdSetColorBlendEquationEXT needs to be set for color attachmet index 0 (VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]))
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound was created with VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT and VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then either vkCmdSetColorBlendAdvancedEXT or vkCmdSetColorBlendEquationEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command for all active color attachments with the blendEnable current value of VK_TRUE (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-10864)
Validation layer: vkCmdDraw(): Shader objects must be used with dynamic rendering, but VkRenderPass VkRenderPass 0x280000000028 is active.
The Vulkan spec states: If a shader object is bound to any graphics stage, the current render pass instance must have been begun with vkCmdBeginRendering (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08876)
Validation layer: vkCmdDraw(): The combination of graphic shader objects bound is invalid, because shader stages VK_SHADER_STAGE_VERTEX_BIT (VkShaderEXT 0x3e000000003e) and VK_SHADER_STAGE_FRAGMENT_BIT (VkShaderEXT 0x3f000000003f) are bound with no other stages between them.
The VK_SHADER_STAGE_VERTEX_BIT shader was created with nextStage of VkShaderStageFlags(0) but needs to be VK_SHADER_STAGE_FRAGMENT_BIT.
The Vulkan spec states: For each shader object bound to a graphics stage, except for shader object bound to the last graphics stage in the logical pipeline, it must have been created with a nextStage including the corresponding bit to the shader object bound to the following graphics stage in the logical pipeline (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-nextStage-10745)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08685)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08686)
Validation layer: vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_GEOMETRY_BIT. (If the geometryShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the geometryShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_GEOMETRY_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08687)
Validation layer: vkCmdDraw(): The bound VK_SHADER_STAGE_VERTEX_BIT shader was created with a pushConstantRangeCount of 0 which doesn't match the bound VK_SHADER_STAGE_FRAGMENT_BIT shader create with a pushConstantRangeCount of 1.
The Vulkan spec states: All bound graphics shader objects must have been created with identical or identically defined push constant ranges (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08878)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkAcquireNextImageKHR(): semaphore and fence are both VK_NULL_HANDLE.
The Vulkan spec states: semaphore and fence must not both be equal to VK_NULL_HANDLE (https://docs.vulkan.org/spec/latest/chapters/VK_KHR_surface/wsi.html#VUID-vkAcquireNextImageKHR-semaphore-01780)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE state is dynamic, but the command buffer never called vkCmdSetRasterizerDiscardEnable.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE dynamic state enabled, then vkCmdSetRasterizerDiscardEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04876)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VK_DYNAMIC_STATE_CULL_MODE state is dynamic, but the command buffer never called vkCmdSetCullMode.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_CULL_MODE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetCullMode must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07840)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, vkCmdSetDepthTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07843)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetStencilTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetStencilTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07847)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBiasEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBiasEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04877)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VK_DYNAMIC_STATE_POLYGON_MODE_EXT state is dynamic, but the command buffer never called vkCmdSetPolygonModeEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_POLYGON_MODE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetPolygonModeEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07621)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT state is dynamic, but the command buffer never called vkCmdSetRasterizationSamplesEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetRasterizationSamplesEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07622)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VK_DYNAMIC_STATE_SAMPLE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetSampleMaskEXT.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SAMPLE_MASK_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetSampleMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07623)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE state is dynamic, but the command buffer never called vkCmdSetDepthBoundsTestEnable.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the depthBounds feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthBoundsTestEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07846)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetDepthClampEnableEXT.
The Vulkan spec states: If the depthClamp feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_DEPTH_CLAMP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetDepthClampEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07620)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToOneEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the alphaToOne feature is enabled, a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToOneEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07625)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetAlphaToCoverageEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetAlphaToCoverageEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07624)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetLogicOpEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If the logicOp feature is enabled, a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_LOGIC_OP_ENABLE_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then vkCmdSetLogicOpEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07626)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT state is dynamic, but the command buffer never called vkCmdSetColorBlendEnableEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_BLEND_ENABLE_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorBlendEnableEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07627)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT state is dynamic, but the command buffer never called vkCmdSetColorWriteMaskEXT.
vkCmdSetRasterizerDiscardEnable last set rasterizerDiscardEnable to VK_FALSE.
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound which was created with VK_DYNAMIC_STATE_COLOR_WRITE_MASK_EXT dynamic state enabled, the current value of rasterizerDiscardEnable is VK_FALSE, and there are color attachments bound, then vkCmdSetColorWriteMaskEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-07629)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetViewportWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetViewportWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-viewportCount-03417)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT state is dynamic, but the command buffer never called vkCmdSetScissorWithCount.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound which was created with the VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT dynamic state enabled, and the state is not inherited, then vkCmdSetScissorWithCount must have been called and not subsequently invalidated in the current command buffer prior to this drawing (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-scissorCount-03418)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE state is dynamic, but the command buffer never called vkCmdSetPrimitiveRestartEnable.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE dynamic state enabled then vkCmdSetPrimitiveRestartEnable must have been called and not subsequently invalidated in the current command buffer prior to this drawing command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04879)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VK_DYNAMIC_STATE_VERTEX_INPUT_EXT state is dynamic, but the command buffer never called vkCmdSetVertexInputEXT.
The Vulkan spec states: If there is a shader object bound to the VK_SHADER_STAGE_VERTEX_BIT stage or the bound graphics pipeline state was created with the VK_DYNAMIC_STATE_VERTEX_INPUT_EXT dynamic state enabled then vkCmdSetVertexInputEXT must have been called and not subsequently invalidated in the current command buffer prior to this draw command (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-04914)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]) was created with VK_SAMPLE_COUNT_1_BIT but the last call to vkCmdSetRasterizationSamplesEXT was set to Unhandled VkSampleCountFlagBits.
The Vulkan spec states: If a shader object is bound to any graphics stage or a graphics pipeline is bound, the current value of rasterizerDiscardEnable is VK_FALSE, and none of the following is enabled: the VK_AMD_mixed_attachment_samples extension the VK_NV_framebuffer_mixed_samples extension the multisampledRenderToSingleSampled feature then the current value of rasterizationSamples must be the same as the current color and/or depth/stencil attachments (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08644)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): vkCmdSetColorBlendEquationEXT needs to be set for color attachmet index 0 (VkRenderPassCreateInfo::pAttachments[0] (Subpass 0, VkSubpassDescription::pColorAttachments[0]))
The Vulkan spec states: If a shader object is bound to the VK_SHADER_STAGE_FRAGMENT_BIT stage or a graphics pipeline is bound was created with VK_DYNAMIC_STATE_COLOR_BLEND_ADVANCED_EXT and VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT dynamic state enabled, and the current value of rasterizerDiscardEnable is VK_FALSE, then either vkCmdSetColorBlendAdvancedEXT or vkCmdSetColorBlendEquationEXT must have been called and not subsequently invalidated in the current command buffer prior to this drawing command for all active color attachments with the blendEnable current value of VK_TRUE (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-10864)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): Shader objects must be used with dynamic rendering, but VkRenderPass VkRenderPass 0x280000000028 is active.
The Vulkan spec states: If a shader object is bound to any graphics stage, the current render pass instance must have been begun with vkCmdBeginRendering (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08876)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): The combination of graphic shader objects bound is invalid, because shader stages VK_SHADER_STAGE_VERTEX_BIT (VkShaderEXT 0x3e000000003e) and VK_SHADER_STAGE_FRAGMENT_BIT (VkShaderEXT 0x3f000000003f) are bound with no other stages between them.
The VK_SHADER_STAGE_VERTEX_BIT shader was created with nextStage of VkShaderStageFlags(0) but needs to be VK_SHADER_STAGE_FRAGMENT_BIT.
The Vulkan spec states: For each shader object bound to a graphics stage, except for shader object bound to the last graphics stage in the logical pipeline, it must have been created with a nextStage including the corresponding bit to the shader object bound to the following graphics stage in the logical pipeline (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-nextStage-10745)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08685)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT. (If the tessellationShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the tessellationShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08686)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): There is no graphics pipeline bound and vkCmdBindShadersEXT() was not called with stage VK_SHADER_STAGE_GEOMETRY_BIT. (If the geometryShader is enabled, the stage needs to be provided, it can be bound with VK_NULL_HANDLE).
The Vulkan spec states: If there is no bound graphics pipeline, and the geometryShader feature is enabled, vkCmdBindShadersEXT must have been called in the current command buffer with pStages with an element of VK_SHADER_STAGE_GEOMETRY_BIT (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08687)
Validation layer: (Warning - This VUID has now been reported 10 times, which is the duplicate_message_limit value, this will be the last time reporting it).
vkCmdDraw(): The bound VK_SHADER_STAGE_VERTEX_BIT shader was created with a pushConstantRangeCount of 0 which doesn't match the bound VK_SHADER_STAGE_FRAGMENT_BIT shader create with a pushConstantRangeCount of 1.
The Vulkan spec states: All bound graphics shader objects must have been created with identical or identically defined push constant ranges (https://docs.vulkan.org/spec/latest/chapters/drawing.html#VUID-vkCmdDraw-None-08878)
